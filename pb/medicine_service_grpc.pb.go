// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MedicineServiceClient is the client API for MedicineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MedicineServiceClient interface {
	CreateMedicine(ctx context.Context, in *CreateMedicineRequest, opts ...grpc.CallOption) (*CreateMedicineResponse, error)
	SearchMedicine(ctx context.Context, in *SearchMedicineRequest, opts ...grpc.CallOption) (MedicineService_SearchMedicineClient, error)
	UploadImage(ctx context.Context, opts ...grpc.CallOption) (MedicineService_UploadImageClient, error)
}

type medicineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMedicineServiceClient(cc grpc.ClientConnInterface) MedicineServiceClient {
	return &medicineServiceClient{cc}
}

func (c *medicineServiceClient) CreateMedicine(ctx context.Context, in *CreateMedicineRequest, opts ...grpc.CallOption) (*CreateMedicineResponse, error) {
	out := new(CreateMedicineResponse)
	err := c.cc.Invoke(ctx, "/medicare.meds.MedicineService/CreateMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicineServiceClient) SearchMedicine(ctx context.Context, in *SearchMedicineRequest, opts ...grpc.CallOption) (MedicineService_SearchMedicineClient, error) {
	stream, err := c.cc.NewStream(ctx, &MedicineService_ServiceDesc.Streams[0], "/medicare.meds.MedicineService/SearchMedicine", opts...)
	if err != nil {
		return nil, err
	}
	x := &medicineServiceSearchMedicineClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MedicineService_SearchMedicineClient interface {
	Recv() (*SearchMedicineResponse, error)
	grpc.ClientStream
}

type medicineServiceSearchMedicineClient struct {
	grpc.ClientStream
}

func (x *medicineServiceSearchMedicineClient) Recv() (*SearchMedicineResponse, error) {
	m := new(SearchMedicineResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *medicineServiceClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (MedicineService_UploadImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &MedicineService_ServiceDesc.Streams[1], "/medicare.meds.MedicineService/UploadImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &medicineServiceUploadImageClient{stream}
	return x, nil
}

type MedicineService_UploadImageClient interface {
	Send(*UploadImageRequest) error
	CloseAndRecv() (*UploadImageResponse, error)
	grpc.ClientStream
}

type medicineServiceUploadImageClient struct {
	grpc.ClientStream
}

func (x *medicineServiceUploadImageClient) Send(m *UploadImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *medicineServiceUploadImageClient) CloseAndRecv() (*UploadImageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MedicineServiceServer is the server API for MedicineService service.
// All implementations must embed UnimplementedMedicineServiceServer
// for forward compatibility
type MedicineServiceServer interface {
	CreateMedicine(context.Context, *CreateMedicineRequest) (*CreateMedicineResponse, error)
	SearchMedicine(*SearchMedicineRequest, MedicineService_SearchMedicineServer) error
	UploadImage(MedicineService_UploadImageServer) error
	//	mustEmbedUnimplementedMedicineServiceServer()
}

// UnimplementedMedicineServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMedicineServiceServer struct {
}

func (UnimplementedMedicineServiceServer) CreateMedicine(context.Context, *CreateMedicineRequest) (*CreateMedicineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMedicine not implemented")
}
func (UnimplementedMedicineServiceServer) SearchMedicine(*SearchMedicineRequest, MedicineService_SearchMedicineServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchMedicine not implemented")
}
func (UnimplementedMedicineServiceServer) UploadImage(MedicineService_UploadImageServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedMedicineServiceServer) mustEmbedUnimplementedMedicineServiceServer() {}

// UnsafeMedicineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MedicineServiceServer will
// result in compilation errors.
type UnsafeMedicineServiceServer interface {
	mustEmbedUnimplementedMedicineServiceServer()
}

func RegisterMedicineServiceServer(s grpc.ServiceRegistrar, srv MedicineServiceServer) {
	s.RegisterService(&MedicineService_ServiceDesc, srv)
}

func _MedicineService_CreateMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMedicineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicineServiceServer).CreateMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medicare.meds.MedicineService/CreateMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicineServiceServer).CreateMedicine(ctx, req.(*CreateMedicineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicineService_SearchMedicine_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchMedicineRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MedicineServiceServer).SearchMedicine(m, &medicineServiceSearchMedicineServer{stream})
}

type MedicineService_SearchMedicineServer interface {
	Send(*SearchMedicineResponse) error
	grpc.ServerStream
}

type medicineServiceSearchMedicineServer struct {
	grpc.ServerStream
}

func (x *medicineServiceSearchMedicineServer) Send(m *SearchMedicineResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MedicineService_UploadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MedicineServiceServer).UploadImage(&medicineServiceUploadImageServer{stream})
}

type MedicineService_UploadImageServer interface {
	SendAndClose(*UploadImageResponse) error
	Recv() (*UploadImageRequest, error)
	grpc.ServerStream
}

type medicineServiceUploadImageServer struct {
	grpc.ServerStream
}

func (x *medicineServiceUploadImageServer) SendAndClose(m *UploadImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *medicineServiceUploadImageServer) Recv() (*UploadImageRequest, error) {
	m := new(UploadImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MedicineService_ServiceDesc is the grpc.ServiceDesc for MedicineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MedicineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "medicare.meds.MedicineService",
	HandlerType: (*MedicineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMedicine",
			Handler:    _MedicineService_CreateMedicine_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchMedicine",
			Handler:       _MedicineService_SearchMedicine_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadImage",
			Handler:       _MedicineService_UploadImage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "medicine_service.proto",
}
